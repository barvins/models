# SSD with Inception v2 configuration for MSCOCO Dataset.
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader. Search for "PATH_TO_BE_CONFIGURED" to find the fields that
# should be configured.

model {
  ssd {
    num_classes: 1
    box_coder {
      #faster_rcnn_box_coder
      keypoint_box_coder {
#      faster_rcnn_box_coder {
        num_keypoints: 4
        y_scale: 2.0
        x_scale: 2.0
        height_scale: 1.0
        width_scale: 1.0
      }
    }
    matcher {
      argmax_matcher {
        matched_threshold: 0.5
        unmatched_threshold: 0.5
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: true
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }
    anchor_generator {
      ssd_anchor_generator {
        num_layers: 6
#        min_scale: 0.2
#        max_scale: 0.95
        min_scale: 0.2
        max_scale: 0.95
        aspect_ratios: 1.0
#        aspect_ratios: 1.5
#        aspect_ratios: 0.66
#        aspect_ratios: 2.0
#        aspect_ratios: 0.5
#        aspect_ratios: 3.0
#        aspect_ratios: 0.3333
        reduce_boxes_in_lowest_layer: false
#        reduce_boxes_in_lowest_layer: true
      }
    }
    image_resizer {
      fixed_shape_resizer {
        height: 300
        width: 300
      }
    }
    box_predictor {
      convolutional_box_predictor {
        min_depth: 0
        max_depth: 0
        num_layers_before_predictor: 0
        use_dropout: false
        dropout_keep_probability: 0.8
        kernel_size: 3
        #box_code_size: 4
        box_code_size: 12
        apply_sigmoid_to_scores: false
        conv_hyperparams {
          activation: RELU_6,
          regularizer {
            l2_regularizer {
              #weight: 0.00004
              #weight: 0.01
              #weight: 0.001
              weight: 0.0001
              }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.03
              mean: 0.0
            }
          }
          batch_norm {
            decay: 0.999
            #decay:0.9
            center: true
            scale: true
            epsilon: 0.00001
            train: true
          }
        }
      }
    }
    feature_extractor {
      type: 'ssd_mobilenet_v2'
      min_depth: 16
      depth_multiplier: 1.0
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00004
            #weight: 0.0004
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.999,
          epsilon: 0.00001,
        }
      }
      override_base_feature_extractor_hyperparams: true
    }
    loss {
      classification_loss {
        weighted_sigmoid {
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      hard_example_miner {
        num_hard_examples: 3000
        iou_threshold: 1
        loss_type: CLASSIFICATION
        max_negatives_per_positive: 3
        min_negatives_per_image: 1
      }
      classification_weight: 1.0
      localization_weight: 7.0
      #2.5
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: 1e-8
        iou_threshold: 0.6
        max_detections_per_class: 10
        max_total_detections: 10
      }
      score_converter: SIGMOID
    }
  }
}

train_config: {
#  batch_size: 32
  batch_size: 32 #128 #on tesla v100
  optimizer {
    rms_prop_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
#          initial_learning_rate: 0.004
          #initial_learning_rate: 0.004
         # initial_learning_rate: 0.0001
          initial_learning_rate: 0.001
          #decay_steps: 1000
          decay_steps: 1000
          decay_factor: 0.95
        }
      }
      momentum_optimizer_value: 0.9
      decay: 0.9
      epsilon: 1.0
    }
  }
  fine_tune_checkpoint: "/mnt/data/goal-detector/models/pretrained/ssd_mobilenet_v2_coco_2018_03_29/model.ckpt"
  #fine_tune_checkpoint: "/mnt/data/goal-detector/models/pretrained/ssd_mobilenet_v2_quantized_300x300_coco_2019_01_03/model.ckpt"
  from_detection_checkpoint: true
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.

  #seems to be no improvement after 120k steps
  num_steps: 120000
  data_augmentation_options {
    random_as_toms_likes_it {
    }
  }

  data_augmentation_options {
    random_horizontal_flip {
      keypoint_flip_permutation: 1
      keypoint_flip_permutation: 0
      keypoint_flip_permutation: 3
      keypoint_flip_permutation: 2
    }
  }
}

train_input_reader: {
  num_keypoints: 4
  tf_record_input_reader {
    input_path: "/mnt/data/goal-detector/data/processed/tfrecord/train.tfrecord"
  }
  label_map_path: "/mnt/data/goal-detector/data/processed/tfrecord/labels.pbtxt"
}

eval_config: {
  num_examples: 939
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  max_evals: 939

  
  use_moving_averages: false
  #only for quantized model
  #use_moving_averages: true
}

eval_input_reader: {
  num_keypoints: 4
  tf_record_input_reader {
    input_path: "/mnt/data/goal-detector/data/processed/tfrecord/eval.tfrecord"
  }
  label_map_path: "/mnt/data/goal-detector/data/processed/tfrecord/labels.pbtxt"
  shuffle: true
  num_readers: 1
}
#graph_rewriter {
#  quantization {
#    delay: 00000
#    weight_bits: 8
#    activation_bits: 8
#  }
#}

